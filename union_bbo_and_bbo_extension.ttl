@prefix bbo: <https://www.irit.fr/recherches/MELODI/ontologies/BBO#> .
@prefix bboExtension: <https://www.teamingai-project.eg/BBOExtension#> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix ql: <http://semweb.mmlab.be/ns/ql#> .
@prefix rami: <https://w3id.org/i40/rami#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rml: <http://semweb.mmlab.be/ns/rml#> .
@prefix rr: <http://www.w3.org/ns/r2rml#> .
@prefix teamingAI: <https://www.teamingai-project.eu/> .

bboExtension: dc:date "2021-11-04" ;
    dc:description "This is the RML mapping from Business Process Model and Notation (BPMN) to Business Process Model and Notation Based Ontology Extension (BBOExt)"@en ;
    dc:title "BPMN to BBO Extension"@en .

teamingAI:AssociationMapping a rr:TriplesMap ;
    rml:logicalSource [ rml:iterator "/*[name()='bpmn:definitions']/*[name()='bpmn:process']/*[name()='bpmn:association']" ;
            rml:referenceFormulation ql:XPath ;
            rml:source "example_ronse.bpmn" ] ;
    rr:predicateObjectMap [ rr:objectMap [ rr:constant bboExtension:Association ] ;
            rr:predicate rdfs:subClassOf ],
        [ rr:objectMap [ rr:parentTriplesMap teamingAI:ProcessMapping ] ;
            rr:predicate teamingAI:belongsToProcess ],
        [ rr:objectMap [ rr:template "{@sourceRef}" ] ;
            rr:predicate bbo:has_sourceRef ],
        [ rr:objectMap [ rr:template "{@targetRef}" ] ;
            rr:predicate bbo:has_targetRef ] ;
    rr:subjectMap [ rr:template "{@id}" ] .

teamingAI:BoundaryEventMapping a rr:TriplesMap ;
    rml:logicalSource [ rml:iterator "/*[name()='bpmn:definitions']/*[name()='bpmn:process']/*[name()='bpmn:boundaryEvent']" ;
            rml:referenceFormulation ql:XPath ;
            rml:source "example_ronse.bpmn" ] ;
    rr:predicateObjectMap [ rr:objectMap [ rr:constant bbo:BoundaryEvent ] ;
            rr:predicate rdfs:subClassOf ],
        [ rr:objectMap [ rr:constant "boundary event" ;
                    rr:language "en" ] ;
            rr:predicate rdfs:label ],
        [ rr:objectMap [ rr:template "{@attachedToRef}" ] ;
            rr:predicate bbo:attachedToRef ],
        [ rr:objectMap [ rml:reference "@name" ] ;
            rr:predicate bbo:name ],
        [ rr:objectMap [ rr:template "{./*[name()='bpmn:outgoing']}" ] ;
            rr:predicate bbo:has_targetRef ],
        [ rr:objectMap [ rr:template "{./*[name()='bpmn:messageEventDefinition']/@id}" ] ;
            rr:predicate bbo:has_eventDefinition ],
        [ rr:objectMap [ rr:template "{./*[name()='bpmn:errorEventDefinition']/@id}" ] ;
            rr:predicate bbo:has_eventDefinition ] ;
    rr:subjectMap [ rr:template "{@id}" ] .

teamingAI:BusinessRuleTaskMapping a rr:TriplesMap ;
    rml:logicalSource [ rml:iterator "/*[name()='bpmn:definitions']/*[name()='bpmn:process']/*[name()='bpmn:businessRuleTask']" ;
            rml:referenceFormulation ql:XPath ;
            rml:source "example_ronse.bpmn" ] ;
    rr:predicateObjectMap [ rr:objectMap [ rr:constant bbo:BusinessRuleTask ] ;
            rr:predicate rdfs:subClassOf ],
        [ rr:objectMap [ rr:constant "business rule task" ;
                    rr:language "en" ] ;
            rr:predicate rdfs:label ],
        [ rr:objectMap [ rr:constant "A Business Rule Task provides a mechanism for the Process to provide input to a Business Rules Engine and to get the output of calculations that the Business Rules Engine might provide. The InputOutputSpecification of the Task (see page 211) will allow the Process to send data to and receive data from the Business Rules Engine." ;
                    rr:language "en" ] ;
            rr:predicate rdfs:comment ],
        [ rr:objectMap [ rml:reference "@name" ] ;
            rr:predicate bbo:name ],
        [ rr:objectMap [ rr:parentTriplesMap teamingAI:ProcessMapping ] ;
            rr:predicate teamingAI:belongsToProcess ] ;
    rr:subjectMap [ rr:template "{@id}" ] .

teamingAI:CollaborationMapping a rr:TriplesMap ;
    rml:logicalSource [ rml:iterator "/*[name()='bpmn:definitions']//*[name()='bpmn:collaboration']" ;
            rml:referenceFormulation ql:XPath ;
            rml:source "example_ronse.bpmn" ] ;
    rr:predicateObjectMap [ rr:objectMap [ rr:constant bboExtension:Collaboration ] ;
            rr:predicate rdfs:subClassOf ],
        [ rr:objectMap [ rr:parentTriplesMap teamingAI:ProcessMapping ] ;
            rr:predicate teamingAI:belongsToProcess ],
        [ rr:objectMap [ rr:constant "pool" ;
                    rr:language "en" ] ;
            rr:predicate rdfs:label ],
        [ rr:objectMap [ rr:constant "A Pool is the graphical representation of a Participant in a Collaboration. A Participant (see page 114) can be a specific PartnerEntity (e.g., a company) or can be a more general PartnerRole (e.g., a buyer, seller, or manufacturer). A Pool MAY or MAY NOT reference a Process. A Pool is NOT REQUIRED to contain a Process, i.e., it can be a “black box.”" ;
                    rr:language "en" ] ;
            rr:predicate rdfs:comment ] ;
    rr:subjectMap [ rr:template "{@id}" ] .

teamingAI:DataInputAssociationMapping a rr:TriplesMap ;
    rml:logicalSource [ rml:iterator "/*[name()='bpmn:definitions']/*[name()='bpmn:process']//*[name()='bpmn:dataInputAssociation']" ;
            rml:referenceFormulation ql:XPath ;
            rml:source "example_ronse.bpmn" ] ;
    rr:predicateObjectMap [ rr:objectMap [ rr:constant bboExtension:DataInputAssociation ] ;
            rr:predicate rdfs:subClassOf ],
        [ rr:objectMap [ rr:constant "data input association" ;
                    rr:language "en" ] ;
            rr:predicate rdfs:label ],
        [ rr:objectMap [ rr:parentTriplesMap teamingAI:ProcessMapping ] ;
            rr:predicate teamingAI:belongsToProcess ],
        [ rr:objectMap [ rr:template "{./*[name()='bpmn:sourceRef']}" ] ;
            rr:predicate bbo:has_sourceRef ],
        [ rr:objectMap [ rr:template "{./*[name()='bpmn:targetRef']}" ] ;
            rr:predicate bbo:has_targetRef ],
        [ rr:objectMap [ rr:template "{../@id}" ] ;
            rr:predicate bboExtension:is_dataInputFor ] ;
    rr:subjectMap [ rr:template "{@id}" ] .

teamingAI:DataObjectMapping a rr:TriplesMap ;
    rml:logicalSource [ rml:iterator "/*[name()='bpmn:definitions']/*[name()='bpmn:process']//*[name()='bpmn:dataObject']" ;
            rml:referenceFormulation ql:XPath ;
            rml:source "example_ronse.bpmn" ] ;
    rr:predicateObjectMap [ rr:objectMap [ rr:constant bboExtension:DataObject ] ;
            rr:predicate rdfs:subClassOf ],
        [ rr:objectMap [ rr:constant "data object" ;
                    rr:language "en" ] ;
            rr:predicate rdfs:label ],
        [ rr:objectMap [ rr:parentTriplesMap teamingAI:ProcessMapping ] ;
            rr:predicate teamingAI:belongsToProcess ] ;
    rr:subjectMap [ rr:template "{@id}" ] .

teamingAI:DataObjectReferenceMapping a rr:TriplesMap ;
    rml:logicalSource [ rml:iterator "/*[name()='bpmn:definitions']/*[name()='bpmn:process']//*[name()='bpmn:dataObjectReference']" ;
            rml:referenceFormulation ql:XPath ;
            rml:source "example_ronse.bpmn" ] ;
    rr:predicateObjectMap [ rr:objectMap [ rr:constant bboExtension:DataObjectReference ] ;
            rr:predicate rdfs:subClassOf ],
        [ rr:objectMap [ rr:constant "data object reference" ;
                    rr:language "en" ] ;
            rr:predicate rdfs:label ],
        [ rr:objectMap [ rml:reference "@name" ] ;
            rr:predicate bbo:name ],
        [ rr:objectMap [ rr:parentTriplesMap teamingAI:ProcessMapping ] ;
            rr:predicate teamingAI:belongsToProcess ],
        [ rr:objectMap [ rr:template "{@dataObjectRef}" ] ;
            rr:predicate bboExtension:dataObjectRef ] ;
    rr:subjectMap [ rr:template "{@id}" ] .

teamingAI:DataOutputAssociationMapping a rr:TriplesMap ;
    rml:logicalSource [ rml:iterator "/*[name()='bpmn:definitions']/*[name()='bpmn:process']//*[name()='bpmn:dataOutputAssociation']" ;
            rml:referenceFormulation ql:XPath ;
            rml:source "example_ronse.bpmn" ] ;
    rr:predicateObjectMap [ rr:objectMap [ rr:constant bboExtension:DataOutputAssociation ] ;
            rr:predicate rdfs:subClassOf ],
        [ rr:objectMap [ rr:constant "data output association" ;
                    rr:language "en" ] ;
            rr:predicate rdfs:label ],
        [ rr:objectMap [ rr:parentTriplesMap teamingAI:ProcessMapping ] ;
            rr:predicate teamingAI:belongsToProcess ],
        [ rr:objectMap [ rr:template "{./*[name()='bpmn:targetRef']}" ] ;
            rr:predicate bbo:has_targetRef ],
        [ rr:objectMap [ rr:template "{../@id}" ] ;
            rr:predicate bboExtension:is_dataOutputFrom ] ;
    rr:subjectMap [ rr:template "{@id}" ] .

teamingAI:DataStoreReferenceMapping a rr:TriplesMap ;
    rml:logicalSource [ rml:iterator "/*[name()='bpmn:definitions']/*[name()='bpmn:process']//*[name()='bpmn:dataStoreReference']" ;
            rml:referenceFormulation ql:XPath ;
            rml:source "example_ronse.bpmn" ] ;
    rr:predicateObjectMap [ rr:objectMap [ rr:constant bboExtension:DataStoreReference ] ;
            rr:predicate rdfs:subClassOf ],
        [ rr:objectMap [ rr:constant "data store reference" ;
                    rr:language "en" ] ;
            rr:predicate rdfs:label ],
        [ rr:objectMap [ rr:parentTriplesMap teamingAI:ProcessMapping ] ;
            rr:predicate teamingAI:belongsToProcess ],
        [ rr:objectMap [ rml:reference "@name" ] ;
            rr:predicate bbo:name ] ;
    rr:subjectMap [ rr:template "{@id}" ] .

teamingAI:EndEventMapping a rr:TriplesMap ;
    rml:logicalSource [ rml:iterator "/*[name()='bpmn:definitions']/*[name()='bpmn:process']/*[name()='bpmn:endEvent']" ;
            rml:referenceFormulation ql:XPath ;
            rml:source "example_ronse.bpmn" ] ;
    rr:predicateObjectMap [ rr:objectMap [ rr:constant bbo:EndEvent ] ;
            rr:predicate rdfs:subClassOf ],
        [ rr:objectMap [ rr:constant "end event" ;
                    rr:language "en" ] ;
            rr:predicate rdfs:label ],
        [ rr:objectMap [ rr:constant "The End Event indicates where a Process will end. In terms of Sequence Flows, the End Event ends the flow of the Process, and thus, will not have any outgoing Sequence Flows—no Sequence Flow can connect from an End Event." ;
                    rr:language "en" ] ;
            rr:predicate rdfs:comment ],
        [ rr:objectMap [ rr:parentTriplesMap teamingAI:ProcessMapping ] ;
            rr:predicate teamingAI:belongsToProcess ],
        [ rr:objectMap [ rml:reference "@name" ] ;
            rr:predicate bbo:name ] ;
    rr:subjectMap [ rr:template "{@id}" ] .

teamingAI:ErrorEventDefinitionMapping a rr:TriplesMap ;
    rml:logicalSource [ rml:iterator "//*[name()='bpmn:errorEventDefinition']" ;
            rml:referenceFormulation ql:XPath ;
            rml:source "example_ronse.bpmn" ] ;
    rr:predicateObjectMap [ rr:objectMap [ rr:constant bbo:ErrorEventDefinition ] ;
            rr:predicate rdfs:subClassOf ],
        [ rr:objectMap [ rr:constant "error event defintion" ;
                    rr:language "en" ] ;
            rr:predicate rdfs:label ],
        [ rr:objectMap [ rr:parentTriplesMap teamingAI:ProcessMapping ] ;
            rr:predicate teamingAI:belongsToProcess ] ;
    rr:subjectMap [ rr:template "{@id}" ] .

teamingAI:ErrorMapping a rr:TriplesMap ;
    rml:logicalSource [ rml:iterator "/*[name()='bpmn:definitions']/*[name()='bpmn:error']" ;
            rml:referenceFormulation ql:XPath ;
            rml:source "example_ronse.bpmn" ] ;
    rr:predicateObjectMap [ rr:objectMap [ rr:constant bbo:Error ] ;
            rr:predicate rdfs:subClassOf ],
        [ rr:objectMap [ rr:constant "error"@en ] ;
            rr:predicate rdfs:label ],
        [ rr:objectMap [ rr:constant "An Error represents the content of an Error Event or the Fault of a failed Operation. An ItemDefinition is used to specify the structure of the Error. An Error is generated when there is a critical problem in the processing of an Activity or when the execution of an Operation failed."@en ] ;
            rr:predicate rdfs:comment ],
        [ rr:objectMap [ rml:reference "@name" ] ;
            rr:predicate bbo:name ] ;
    rr:subjectMap [ rr:template "{@id}" ] .

teamingAI:IncomingMapping a rr:TriplesMap ;
    rml:logicalSource [ rml:iterator "//*[name()='bpmn:incoming']" ;
            rml:referenceFormulation ql:XPath ;
            rml:source "example_ronse.bpmn" ] ;
    rr:predicateObjectMap [ rr:objectMap [ rr:constant bbo:SequenceFlow ] ;
            rr:predicate rdfs:subClassOf ],
        [ rr:objectMap [ rr:constant "incoming" ;
                    rr:language "en" ] ;
            rr:predicate rdfs:label ],
        [ rr:objectMap [ rr:constant "A Sequence Flow is used to show the order of Flow Elements in a Process or a Choreography. Each Sequence Flow has only one source and only one target. The source and target MUST be from the set of the following Flow Elements: Events (Start, Intermediate, and End), Activities (Task and Sub-Process; for Processes), Choreography Activities (Choreography Task and Sub-Choreography; for Choreographies), and Gateways." ;
                    rr:language "en" ] ;
            rr:predicate rdfs:comment ],
        [ rr:objectMap [ rr:parentTriplesMap teamingAI:ProcessMapping ] ;
            rr:predicate teamingAI:belongsToProcess ] ;
    rr:subjectMap [ rr:template "{*[text()]}" ] .

teamingAI:IntermediateThrowMapping a rr:TriplesMap ;
    rml:logicalSource [ rml:iterator "/*[name()='bpmn:definitions']/*[name()='bpmn:process']//*[name()='bpmn:intermediateThrowEvent']" ;
            rml:referenceFormulation ql:XPath ;
            rml:source "example_ronse.bpmn" ] ;
    rr:predicateObjectMap [ rr:objectMap [ rr:constant bbo:IntermediateThrowEvent ] ;
            rr:predicate rdfs:subClassOf ],
        [ rr:objectMap [ rr:constant "intermediate throw event" ;
                    rr:language "en" ] ;
            rr:predicate rdfs:label ],
        [ rr:objectMap [ rr:parentTriplesMap teamingAI:ProcessMapping ] ;
            rr:predicate teamingAI:belongsToProcess ],
        [ rr:objectMap [ rml:reference "@name" ] ;
            rr:predicate bbo:name ],
        [ rr:objectMap [ rr:template "{./*[name()='bpmn:outgoing']}" ] ;
            rr:predicate bbo:has_targetRef ],
        [ rr:objectMap [ rr:template "{./*[name()='bpmn:incoming']}" ] ;
            rr:predicate bbo:has_sourceRef ],
        [ rr:objectMap [ rr:template "{./*[name()='bpmn:messageEventDefinition']}" ] ;
            rr:predicate bbo:has_eventDefinition ] ;
    rr:subjectMap [ rr:template "{@id}" ] .

teamingAI:LaneMapping a rr:TriplesMap ;
    rml:logicalSource [ rml:iterator "/*[name()='bpmn:definitions']/*[name()='bpmn:process']/*[name()='bpmn:laneSet']/*[name()='bpmn:lane']" ;
            rml:referenceFormulation ql:XPath ;
            rml:source "example_ronse.bpmn" ] ;
    rr:predicateObjectMap [ rr:objectMap [ rr:constant bboExtension:Lane ] ;
            rr:predicate rdfs:subClassOf ],
        [ rr:objectMap [ rr:parentTriplesMap teamingAI:ProcessMapping ] ;
            rr:predicate teamingAI:belongsToProcess ],
        [ rr:objectMap [ rr:constant "lane" ;
                    rr:language "en" ] ;
            rr:predicate rdfs:label ],
        [ rr:objectMap [ rr:constant "A Lane is a sub-partition within a Process (often within a Pool) and will extend the entire length of the Process level, either vertically or horizontally. When a Lane is defined it is contained within a LaneSet, which is contained within a Process." ;
                    rr:language "en" ] ;
            rr:predicate rdfs:comment ],
        [ rr:objectMap [ rr:template "{*[text()]}" ] ;
            rr:predicate bbo:has_activity ],
        [ rr:objectMap [ rml:reference "@name" ] ;
            rr:predicate bbo:name ] ;
    rr:subjectMap [ rr:template "{@id}" ] .

teamingAI:LaneSetMapping a rr:TriplesMap ;
    rml:logicalSource [ rml:iterator "/*[name()='bpmn:definitions']/*[name()='bpmn:process']/*[name()='bpmn:laneSet']" ;
            rml:referenceFormulation ql:XPath ;
            rml:source "example_ronse.bpmn" ] ;
    rr:predicateObjectMap [ rr:objectMap [ rr:constant bboExtension:LaneSet ] ;
            rr:predicate rdfs:subClassOf ],
        [ rr:objectMap [ rr:parentTriplesMap teamingAI:ProcessMapping ] ;
            rr:predicate teamingAI:belongsToProcess ],
        [ rr:objectMap [ rr:constant "lane set" ;
                    rr:language "en" ] ;
            rr:predicate rdfs:label ],
        [ rr:objectMap [ rr:constant "The Lane Set element defines the container for one or more Lanes. A Process can contain one or more Lane Sets." ;
                    rr:language "en" ] ;
            rr:predicate rdfs:comment ] ;
    rr:subjectMap [ rr:template "{@id}" ] .

teamingAI:ManualTask a rr:TriplesMap ;
    rml:logicalSource [ rml:iterator "/*[name()='bpmn:definitions']/*[name()='bpmn:process']/*[name()='bpmn:manualTask']" ;
            rml:referenceFormulation ql:XPath ;
            rml:source "example_ronse.bpmn" ] ;
    rr:predicateObjectMap [ rr:objectMap [ rr:constant bbo:ManualTask ] ;
            rr:predicate rdfs:subClassOf ],
        [ rr:objectMap [ rr:constant "manual task" ;
                    rr:language "en" ] ;
            rr:predicate rdfs:label ],
        [ rr:objectMap [ rr:constant "A Manual Task is a Task that is expected to be performed without the aid of any business process execution engine or any application. An example of this could be a telephone technician installing a telephone at a customer location." ;
                    rr:language "en" ] ;
            rr:predicate rdfs:comment ],
        [ rr:objectMap [ rml:reference "@name" ] ;
            rr:predicate bbo:name ],
        [ rr:objectMap [ rr:parentTriplesMap teamingAI:ProcessMapping ] ;
            rr:predicate teamingAI:belongsToProcess ] ;
    rr:subjectMap [ rr:template "{@id}" ] .

teamingAI:MessageEventDefinitionMapping a rr:TriplesMap ;
    rml:logicalSource [ rml:iterator "//*[name()='bpmn:messageEventDefinition']" ;
            rml:referenceFormulation ql:XPath ;
            rml:source "example_ronse.bpmn" ] ;
    rr:predicateObjectMap [ rr:objectMap [ rr:constant bbo:MessageEventDefinition ] ;
            rr:predicate rdfs:subClassOf ],
        [ rr:objectMap [ rr:constant "message event defintion" ;
                    rr:language "en" ] ;
            rr:predicate rdfs:label ],
        [ rr:objectMap [ rr:parentTriplesMap teamingAI:ProcessMapping ] ;
            rr:predicate teamingAI:belongsToProcess ] ;
    rr:subjectMap [ rr:template "{@id}" ] .

teamingAI:MessageFlowMapping a rr:TriplesMap ;
    rml:logicalSource [ rml:iterator "/*[name()='bpmn:definitions']/*[name()='bpmn:collaboration']/*[name()='bpmn:messageFlow']" ;
            rml:referenceFormulation ql:XPath ;
            rml:source "example_ronse.bpmn" ] ;
    rr:predicateObjectMap [ rr:objectMap [ rr:constant bboExtension:MessageFlow ] ;
            rr:predicate rdfs:subClassOf ],
        [ rr:objectMap [ rr:parentTriplesMap teamingAI:ProcessMapping ] ;
            rr:predicate teamingAI:belongsToProcess ],
        [ rr:objectMap [ rr:constant "message flow" ;
                    rr:language "en" ] ;
            rr:predicate rdfs:label ],
        [ rr:objectMap [ rr:constant "A Message Flow is used to show the flow of Messages between two Participants that are prepared to send and receive them." ;
                    rr:language "en" ] ;
            rr:predicate rdfs:comment ],
        [ rr:objectMap [ rml:reference "@name" ] ;
            rr:predicate bbo:name ],
        [ rr:objectMap [ rr:template "{@sourceRef}" ] ;
            rr:predicate bbo:has_sourceRef ],
        [ rr:objectMap [ rr:template "{@targetRef}" ] ;
            rr:predicate bbo:has_targetRef ] ;
    rr:subjectMap [ rr:template "{@id}" ] .

teamingAI:OutgoingMapping a rr:TriplesMap ;
    rml:logicalSource [ rml:iterator "//*[name()='bpmn:outgoing']" ;
            rml:referenceFormulation ql:XPath ;
            rml:source "example_ronse.bpmn" ] ;
    rr:predicateObjectMap [ rr:objectMap [ rr:constant bbo:SequenceFlow ] ;
            rr:predicate rdfs:subClassOf ],
        [ rr:objectMap [ rr:constant "A Sequence Flow is used to show the order of Flow Elements in a Process or a Choreography. Each Sequence Flow has only one source and only one target. The source and target MUST be from the set of the following Flow Elements: Events (Start, Intermediate, and End), Activities (Task and Sub-Process; for Processes), Choreography Activities (Choreography Task and Sub-Choreography; for Choreographies), and Gateways." ;
                    rr:language "en" ] ;
            rr:predicate rdfs:comment ],
        [ rr:objectMap [ rr:parentTriplesMap teamingAI:ProcessMapping ] ;
            rr:predicate teamingAI:belongsToProcess ] ;
    rr:subjectMap [ rr:template "{*[text()]}" ] .

teamingAI:ParallelGatewayMapping a rr:TriplesMap ;
    rml:logicalSource [ rml:iterator "/*[name()='bpmn:definitions']/*[name()='bpmn:process']/*[name()='bpmn:parallelGateway']" ;
            rml:referenceFormulation ql:XPath ;
            rml:source "example_ronse.bpmn" ] ;
    rr:predicateObjectMap [ rr:objectMap [ rr:constant bbo:ParallelGateway ] ;
            rr:predicate rdfs:subClassOf ],
        [ rr:objectMap [ rr:constant "parallel gateway" ;
                    rr:language "en" ] ;
            rr:predicate rdfs:label ],
        [ rr:objectMap [ rr:constant "A Parallel Gateway is used to synchronize (combine) parallel flows and to create parallel flows. A Parallel Gateway creates parallel paths without checking any conditions; each outgoing Sequence Flow receives a token upon execution of this Gateway. For incoming flows, the Parallel Gateway will wait for all incoming flows before triggering the flow through its outgoing Sequence Flows." ;
                    rr:language "en" ] ;
            rr:predicate rdfs:comment ],
        [ rr:objectMap [ rr:template "{@default}" ] ;
            rr:predicate bbo:DefaultSequenceFlow ],
        [ rr:objectMap [ rr:parentTriplesMap teamingAI:ProcessMapping ] ;
            rr:predicate teamingAI:belongsToProcess ],
        [ rr:objectMap [ rml:reference "@name" ] ;
            rr:predicate bbo:name ],
        [ rr:objectMap [ rr:template "{./*[name()='bpmn:outgoing']}" ] ;
            rr:predicate bbo:has_targetRef ],
        [ rr:objectMap [ rr:template "{./*[name()='bpmn:incoming']}" ] ;
            rr:predicate bbo:has_sourceRef ] ;
    rr:subjectMap [ rr:template "{@id}" ] .

teamingAI:ParticipantMapping a rr:TriplesMap ;
    rml:logicalSource [ rml:iterator "/*[name()='bpmn:definitions']/*[name()='bpmn:collaboration']/*[name()='bpmn:participant']" ;
            rml:referenceFormulation ql:XPath ;
            rml:source "example_ronse.bpmn" ] ;
    rr:predicateObjectMap [ rr:objectMap [ rr:constant bboExtension:Participant ] ;
            rr:predicate rdfs:subClassOf ],
        [ rr:objectMap [ rr:parentTriplesMap teamingAI:ProcessMapping ] ;
            rr:predicate teamingAI:belongsToProcess ],
        [ rr:objectMap [ rr:constant "participant" ;
                    rr:language "en" ] ;
            rr:predicate rdfs:label ],
        [ rr:objectMap [ rr:constant "A Participant represents a specific PartnerEntity (e.g., a company) and/or a more general PartnerRole (e.g., a buyer, seller, or manufacturer) that are Participants in a Collaboration. A Participant is often responsible for the execution of the Process enclosed in a Pool; however, a Pool MAY be defined without a Process" ;
                    rr:language "en" ] ;
            rr:predicate rdfs:comment ],
        [ rr:objectMap [ rml:reference "@name" ] ;
            rr:predicate bbo:name ],
        [ rr:objectMap [ rr:template "{@processRef}" ] ;
            rr:predicate bboExtension:processRef ] ;
    rr:subjectMap [ rr:template "{@id}" ] .

teamingAI:PropertyMapping a rr:TriplesMap ;
    rml:logicalSource [ rml:iterator "/*[name()='bpmn:definitions']/*[name()='bpmn:process']//*[name()='bpmn:property']" ;
            rml:referenceFormulation ql:XPath ;
            rml:source "example_ronse.bpmn" ] ;
    rr:predicateObjectMap [ rr:objectMap [ rr:constant bbo:Property ] ;
            rr:predicate rdfs:subClassOf ],
        [ rr:objectMap [ rr:constant "property"@en ] ;
            rr:predicate rdfs:label ],
        [ rr:objectMap [ rml:reference "@name" ] ;
            rr:predicate bbo:name ],
        [ rr:objectMap [ rr:template "{../@id}" ] ;
            rr:predicate bbo:has_property_element ] ;
    rr:subjectMap [ rr:template "{@id}" ] .

teamingAI:ReceiveTaskMapping a rr:TriplesMap ;
    rml:logicalSource [ rml:iterator "/*[name()='bpmn:definitions']/*[name()='bpmn:process']/*[name()='bpmn:receiveTask']" ;
            rml:referenceFormulation ql:XPath ;
            rml:source "example_ronse.bpmn" ] ;
    rr:predicateObjectMap [ rr:objectMap [ rml:reference "@name" ] ;
            rr:predicate bbo:name ],
        [ rr:objectMap [ rr:parentTriplesMap teamingAI:ProcessMapping ] ;
            rr:predicate teamingAI:belongsToProcess ],
        [ rr:objectMap [ rr:constant bbo:ReceiveTask ] ;
            rr:predicate rdfs:subClassOf ],
        [ rr:objectMap [ rr:constant "receive task" ;
                    rr:language "en" ] ;
            rr:predicate rdfs:label ],
        [ rr:objectMap [ rr:constant "A Receive Task is a simple Task that is designed to wait for a Message to arrive from an external Participant (relative to the Process). Once the Message has been received, the Task is completed." ;
                    rr:language "en" ] ;
            rr:predicate rdfs:comment ] ;
    rr:subjectMap [ rr:template "{@id}" ] .

teamingAI:ScriptTaskMapping a rr:TriplesMap ;
    rml:logicalSource [ rml:iterator "/*[name()='bpmn:definitions']/*[name()='bpmn:process']/*[name()='bpmn:scriptTask']" ;
            rml:referenceFormulation ql:XPath ;
            rml:source "example_ronse.bpmn" ] ;
    rr:predicateObjectMap [ rr:objectMap [ rr:constant bbo:ScriptTask ] ;
            rr:predicate rdfs:subClassOf ],
        [ rr:objectMap [ rr:constant "script task" ;
                    rr:language "en" ] ;
            rr:predicate rdfs:label ],
        [ rr:objectMap [ rr:constant "A Script Task is executed by a business process engine. The modeler or implementer defines a script in a language that the engine can interpret. When the Task is ready to start, the engine will execute the script. When the script is completed, the Task will also be completed." ;
                    rr:language "en" ] ;
            rr:predicate rdfs:comment ],
        [ rr:objectMap [ rml:reference "@name" ] ;
            rr:predicate bbo:name ],
        [ rr:objectMap [ rr:parentTriplesMap teamingAI:ProcessMapping ] ;
            rr:predicate teamingAI:belongsToProcess ] ;
    rr:subjectMap [ rr:template "{@id}" ] .

teamingAI:SendTaskMapping a rr:TriplesMap ;
    rml:logicalSource [ rml:iterator "/*[name()='bpmn:definitions']/*[name()='bpmn:process']/*[name()='bpmn:sendTask']" ;
            rml:referenceFormulation ql:XPath ;
            rml:source "example_ronse.bpmn" ] ;
    rr:predicateObjectMap [ rr:objectMap [ rr:constant bbo:SendTask ] ;
            rr:predicate rdfs:subClassOf ],
        [ rr:objectMap [ rr:constant "send task" ;
                    rr:language "en" ] ;
            rr:predicate rdfs:label ],
        [ rr:objectMap [ rr:constant "A Send Task is a simple Task that is designed to send a Message to an external Participant (relative to the Process). Once the Message has been sent, the Task is completed." ;
                    rr:language "en" ] ;
            rr:predicate rdfs:comment ],
        [ rr:objectMap [ rml:reference "@name" ] ;
            rr:predicate bbo:name ],
        [ rr:objectMap [ rr:parentTriplesMap teamingAI:ProcessMapping ] ;
            rr:predicate teamingAI:belongsToProcess ] ;
    rr:subjectMap [ rr:template "{@id}" ] .

teamingAI:SequenceFlowMapping a rr:TriplesMap ;
    rml:logicalSource [ rml:iterator "/*[name()='bpmn:definitions']/*[name()='bpmn:process']/*[name()='bpmn:sequenceFlow']" ;
            rml:referenceFormulation ql:XPath ;
            rml:source "example_ronse.bpmn" ] ;
    rr:predicateObjectMap [ rr:objectMap [ rr:constant bbo:SequenceFlow ] ;
            rr:predicate rdfs:subClassOf ],
        [ rr:ObjectMap [ rr:constant "sequence flow" ;
                    rr:language "en" ] ;
            rr:predicate rdfs:label ],
        [ rr:objectMap [ rr:template "{@sourceRef}" ] ;
            rr:predicate bbo:has_sourceRef ],
        [ rr:objectMap [ rr:template "{@targetRef}" ] ;
            rr:predicate bbo:has_targetRef ],
        [ rr:objectMap [ rr:constant "A Sequence Flow is used to show the order of Flow Elements in a Process or a Choreography. Each Sequence Flow has only one source and only one target. The source and target MUST be from the set of the following Flow Elements: Events (Start, Intermediate, and End), Activities (Task and Sub-Process; for Processes), Choreography Activities (Choreography Task and Sub-Choreography; for Choreographies), and Gateways." ;
                    rr:language "en" ] ;
            rr:predicate rdfs:comment ],
        [ rr:objectMap [ rr:parentTriplesMap teamingAI:ProcessMapping ] ;
            rr:predicate teamingAI:belongsToProcess ],
        [ rr:objectMap [ rml:reference "@name" ] ;
            rr:predicate bbo:name ] ;
    rr:subjectMap [ rr:template "{@id}" ] .

teamingAI:ServiceTaskMapping a rr:TriplesMap ;
    rml:logicalSource [ rml:iterator "/*[name()='bpmn:definitions']/*[name()='bpmn:process']/*[name()='bpmn:serviceTask']" ;
            rml:referenceFormulation ql:XPath ;
            rml:source "example_ronse.bpmn" ] ;
    rr:predicateObjectMap [ rr:objectMap [ rr:constant bbo:ServiceTask ] ;
            rr:predicate rdfs:subClassOf ],
        [ rr:objectMap [ rr:constant "service task" ;
                    rr:language "en" ] ;
            rr:predicate rdfs:label ],
        [ rr:objectMap [ rr:constant "A Service Task is a Task that uses some sort of service, which could be a Web service or an automated application." ;
                    rr:language "en" ] ;
            rr:predicate rdfs:comment ],
        [ rr:objectMap [ rml:reference "@name" ] ;
            rr:predicate bbo:name ],
        [ rr:objectMap [ rr:parentTriplesMap teamingAI:ProcessMapping ] ;
            rr:predicate teamingAI:belongsToProcess ] ;
    rr:subjectMap [ rr:template "{@id}" ] .

teamingAI:StartEventMapping a rr:TriplesMap ;
    rml:logicalSource [ rml:iterator "/*[name()='bpmn:definitions']/*[name()='bpmn:process']/*[name()='bpmn:startEvent']" ;
            rml:referenceFormulation ql:XPath ;
            rml:source "example_ronse.bpmn" ] ;
    rr:predicateObjectMap [ rr:objectMap [ rr:constant bbo:StartEvent ] ;
            rr:predicate rdfs:subClassOf ],
        [ rr:objectMap [ rr:constant "start event" ;
                    rr:language "en" ] ;
            rr:predicate rdfs:label ],
        [ rr:objectMap [ rr:template "{*[text()]}" ] ;
            rr:predicate bbo:has_targetRef ],
        [ rr:objectMap [ rr:constant "The Start Event indicates where a particular Process will start. In terms of Sequence Flows, the Start Event starts the flow of the Process, and thus, will not have any incoming Sequence Flows—no Sequence Flow can connect to a Start Event." ;
                    rr:language "en" ] ;
            rr:predicate rdfs:comment ],
        [ rr:objectMap [ rr:parentTriplesMap teamingAI:ProcessMapping ] ;
            rr:predicate teamingAI:belongsToProcess ],
        [ rr:objectMap [ rml:reference "@name" ] ;
            rr:predicate bbo:name ] ;
    rr:subjectMap [ rr:template "{@id}" ] .

teamingAI:SubProcessMapping a rr:TriplesMap ;
    rml:logicalSource [ rml:iterator "/*[name()='bpmn:definitions']/*[name()='bpmn:process']/*[name()='bpmn:subProcess']" ;
            rml:referenceFormulation ql:XPath ;
            rml:source "example_ronse.bpmn" ] ;
    rr:predicateObjectMap [ rr:objectMap [ rr:constant rami:Business ] ;
            rr:predicate teamingAI:belongsToRAMILayer ],
        [ rr:objectMap [ rr:constant teamingAI:BusinessProcessManagementView ] ;
            rr:predicate teamingAI:belongsToView ],
        [ rr:objectMap [ rr:constant bbo:SubProcess ] ;
            rr:predicate rdfs:subClassOf ],
        [ rr:objectMap [ rr:constant "a process that is included within another process." ] ;
            rr:predicate rdfs:comment ] ;
    rr:subjectMap [ rr:template "{@id}" ] .

teamingAI:TaskMapping a rr:TriplesMap ;
    rml:logicalSource [ rml:iterator "/*[name()='bpmn:definitions']/*[name()='bpmn:process']/*[name()='bpmn:task']" ;
            rml:referenceFormulation ql:XPath ;
            rml:source "example_ronse.bpmn" ] ;
    rr:predicateObjectMap [ rr:objectMap [ rr:constant bbo:Task ] ;
            rr:predicate rdfs:subClassOf ],
        [ rr:objectMap [ rr:constant "task" ;
                    rr:language "en" ] ;
            rr:predicate rdfs:label ],
        [ rr:objectMap [ rr:constant "A Task is an atomic Activity within a Process flow. A Task is used when the work in the Process cannot be broken down to a finer level of detail. Generally, an end-user and/or applications are used to perform the Task when it is executed." ;
                    rr:language "en" ] ;
            rr:predicate rdfs:comment ],
        [ rr:objectMap [ rml:reference "@name" ] ;
            rr:predicate bbo:name ],
        [ rr:objectMap [ rr:parentTriplesMap teamingAI:ProcessMapping ] ;
            rr:predicate teamingAI:belongsToProcess ] ;
    rr:subjectMap [ rr:template "{@id}" ] .

teamingAI:TextAnnotationMapping a rr:TriplesMap ;
    rml:logicalSource [ rml:iterator "/*[name()='bpmn:definitions']/*[name()='bpmn:process']/*[name()='bpmn:textAnnotation']" ;
            rml:referenceFormulation ql:XPath ;
            rml:source "example_ronse.bpmn" ] ;
    rr:predicateObjectMap [ rr:objectMap [ rr:parentTriplesMap teamingAI:ProcessMapping ] ;
            rr:predicate teamingAI:belongsToProcess ],
        [ rr:objectMap [ rr:constant "text annotation" ;
                    rr:language "en" ] ;
            rr:predicate rdfs:label ],
        [ rr:objectMap [ rr:language "en" ;
                    rr:template "{*[text()]}" ] ;
            rr:predicate rdfs:comment ],
        [ rr:objectMap [ rr:constant bboExtension:TextAnnotation ] ;
            rr:predicate rdfs:subClassOf ] ;
    rr:subjectMap [ rr:template "{@id}" ] .

teamingAI:UserTaskMapping a rr:TriplesMap ;
    rml:logicalSource [ rml:iterator "/*[name()='bpmn:definitions']/*[name()='bpmn:process']/*[name()='bpmn:userTask']" ;
            rml:referenceFormulation ql:XPath ;
            rml:source "example_ronse.bpmn" ] ;
    rr:predicateObjectMap [ rr:objectMap [ rr:constant bbo:UserTask ] ;
            rr:predicate rdfs:subClassOf ],
        [ rr:objectMap [ rr:constant "user task" ;
                    rr:language "en" ] ;
            rr:predicate rdfs:label ],
        [ rr:objectMap [ rr:constant "A User Task is a typical “workflow” Task where a human performer performs the Task with the assistance of a software application and is scheduled through a task list manager of some sort." ;
                    rr:language "en" ] ;
            rr:predicate rdfs:comment ],
        [ rr:objectMap [ rml:reference "@name" ] ;
            rr:predicate bbo:name ],
        [ rr:objectMap [ rr:parentTriplesMap teamingAI:ProcessMapping ] ;
            rr:predicate teamingAI:belongsToProcess ] ;
    rr:subjectMap [ rr:template "{@id}" ] .

<https://www.teamingai-project.eu/bpmn_to_bbo#> dc:date "2021-11-04" ;
    dc:description "This is the RML mapping from Business Process Model and Notation (BPMN) to Business Process Model and Notation Based Ontology (BBO)"@en ;
    dc:title "BPMN to BBO"@en .

teamingAI:eXlusiveORGatewayMapping a rr:TriplesMap ;
    rml:logicalSource [ rml:iterator "/*[name()='bpmn:definitions']/*[name()='bpmn:process']//*[name()='bpmn:exclusiveGateway']" ;
            rml:referenceFormulation ql:XPath ;
            rml:source "example_ronse.bpmn" ] ;
    rr:predicateObjectMap [ rr:objectMap [ rr:constant bbo:ExclusiveGateway ] ;
            rr:predicate rdfs:subClassOf ],
        [ rr:objectMap [ rr:constant "exclusive or gateway" ;
                    rr:language "en" ] ;
            rr:predicate rdfs:label ],
        [ rr:objectMap [ rr:constant "A diverging Exclusive Gateway (Decision) is used to create alternative paths within a Process flow. This is basically the “diversion point in the road” for a Process. For a given instance of the Process, only one of the paths can be taken." ;
                    rr:language "en" ] ;
            rr:predicate rdfs:comment ],
        [ rr:objectMap [ rr:parentTriplesMap teamingAI:ProcessMapping ] ;
            rr:predicate teamingAI:belongsToProcess ],
        [ rr:objectMap [ rr:template "{@default}" ] ;
            rr:predicate bbo:DefaultSequenceFlow ],
        [ rr:objectMap [ rml:reference "@name" ] ;
            rr:predicate bbo:name ],
        [ rr:objectMap [ rr:template "{./*[name()='bpmn:outgoing']}" ] ;
            rr:predicate bbo:has_targetRef ],
        [ rr:objectMap [ rr:template "{./*[name()='bpmn:incoming']}" ] ;
            rr:predicate bbo:has_sourceRef ] ;
    rr:subjectMap [ rr:template "{@id}" ] .

teamingAI:ProcessMapping a rr:TriplesMap ;
    rml:logicalSource [ rml:iterator "/*[name()='bpmn:definitions']/*[name()='bpmn:process']" ;
            rml:referenceFormulation ql:XPath ;
            rml:source "example_ronse.bpmn" ] ;
    rr:predicateObjectMap [ rr:objectMap [ rr:constant bbo:Process ] ;
            rr:predicate rdfs:subClassOf ],
        [ rr:objectMap [ rr:constant "representation of a business process using business process model and notation business ontology" ] ;
            rr:predicate rdfs:comment ],
        [ rr:objectMap [ rr:constant rami:Business ] ;
            rr:predicate teamingAI:belongsToRAMILayer ],
        [ rr:objectMap [ rr:constant teamingAI:BusinessProcessManagementView ] ;
            rr:predicate teamingAI:belongsToView ] ;
    rr:subjectMap [ rr:template "{@id}" ] .

